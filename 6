<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Popup Auth Comments</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 text-gray-900">

<div class="max-w-3xl mx-auto p-6">
  <!-- Auth Controls -->
  <div id="auth" class="mb-6">
    <p id="user-info" class="mb-2 text-sm text-gray-700">Checking auth…</p>
    <div class="flex gap-2 flex-wrap">
      <button id="login-main-btn" class="auth-show px-4 py-2 bg-green-600 text-white rounded">Login</button>
      <button id="register-main-btn" class="auth-show px-4 py-2 bg-yellow-600 text-white rounded">Register</button>
      <button id="logout-btn" class="auth-hide hidden px-4 py-2 bg-red-600 text-white rounded">Logout</button>
    </div>
  </div>

  <!-- New Comment -->
  <div class="mb-6">
    <textarea id="new-comment" rows="3" placeholder="Add a public comment..." 
              class="w-full p-3 border rounded"></textarea>
    <button id="post-comment-btn" class="mt-2 px-4 py-2 bg-indigo-600 text-white rounded">
      Post Comment
    </button>
  </div>

  <!-- Comments List -->
  <div id="comments" class="space-y-4"></div>
  <button id="load-more-btn" class="mt-4 px-4 py-2 bg-gray-300 text-gray-700 rounded hidden">
    Load More Comments
  </button>
</div>

<!-- Login Modal -->
<div id="login-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
  <div class="bg-white rounded-lg p-6 w-80">
    <h2 class="text-lg font-semibold mb-4">Login Options</h2>
    <input id="login-email" type="email" placeholder="Email" class="mb-2 w-full border p-2 rounded" />
    <input id="login-pass" type="password" placeholder="Password" class="mb-4 w-full border p-2 rounded" />
    <button id="login-email-btn" class="w-full mb-2 px-4 py-2 bg-green-600 text-white rounded">Email/Password</button>
    <button id="login-google-btn" class="w-full mb-2 px-4 py-2 bg-blue-600 text-white rounded">Google</button>
    <button onclick="closeModal('login-modal')" class="w-full px-4 py-2 bg-gray-400 text-white rounded">Close</button>
  </div>
</div>

<!-- Register Modal -->
<div id="register-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
  <div class="bg-white rounded-lg p-6 w-80">
    <h2 class="text-lg font-semibold mb-4">Register Options</h2>
    <input id="reg-email" type="email" placeholder="Email" class="mb-2 w-full border p-2 rounded" />
    <input id="reg-pass" type="password" placeholder="Password" class="mb-4 w-full border p-2 rounded" />
    <button id="register-email-btn" class="w-full mb-2 px-4 py-2 bg-green-600 text-white rounded">Email/Password</button>
    <button id="register-google-btn" class="w-full mb-2 px-4 py-2 bg-blue-600 text-white rounded">Google</button>
    <button id="register-guest-btn" class="w-full mb-2 px-4 py-2 bg-gray-600 text-white rounded">Guest</button>
    <button onclick="closeModal('register-modal')" class="w-full px-4 py-2 bg-gray-400 text-white rounded">Close</button>
  </div>
</div>

<script type="module">
import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-app.js";
import {
  getAuth, GoogleAuthProvider,
  onAuthStateChanged, signInWithPopup,
  signInAnonymously, createUserWithEmailAndPassword,
  signInWithEmailAndPassword, signOut
} from "https://www.gstatic.com/firebasejs/10.12.2/firebase-auth.js";
import {
  getFirestore, collection, doc,
  addDoc, updateDoc, deleteDoc,
  serverTimestamp, query, orderBy,
  limit, startAfter, getDocs, onSnapshot,
  arrayUnion, arrayRemove, getDoc
} from "https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js";

const firebaseConfig = {
  apiKey: "AIzaSyCAVF_QueVUEGojKuB3vKH8L39wMZocJ24",
  authDomain: "ishwar0980-7525b.firebaseapp.com",
  projectId: "ishwar0980-7525b",
  storageBucket: "ishwar0980-7525b.appspot.com",
  messagingSenderId: "522376702284",
  appId: "1:522376702284:web:433b482f1196c9c23d87e9"
};
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);
const googleProvider = new GoogleAuthProvider();

// DOM Elements
const loginBtn = document.getElementById("login-main-btn");
const registerBtn = document.getElementById("register-main-btn");
const logoutBtn = document.getElementById("logout-btn");
const userInfo = document.getElementById("user-info");

const loginEmailInput = document.getElementById("login-email");
const loginPassInput = document.getElementById("login-pass");
const loginEmailBtn = document.getElementById("login-email-btn");
const loginGoogleBtn = document.getElementById("login-google-btn");

const regEmailInput = document.getElementById("reg-email");
const regPassInput = document.getElementById("reg-pass");
const registerEmailBtn = document.getElementById("register-email-btn");
const registerGoogleBtn = document.getElementById("register-google-btn");
const registerGuestBtn = document.getElementById("register-guest-btn");

const commentBox = document.getElementById("new-comment");
const postCommentBtn = document.getElementById("post-comment-btn");
const commentsContainer = document.getElementById("comments");
const loadMoreBtn = document.getElementById("load-more-btn");

let currentUser = null;
let lastVisible = null;
const PAGE_SIZE = 10;

// Modal helpers
window.closeModal = function(id) {
  document.getElementById(id).classList.add("hidden");
};
function openModal(id) {
  document.getElementById(id).classList.remove("hidden");
}

// Auth logic
loginBtn.onclick = () => openModal("login-modal");
registerBtn.onclick = () => openModal("register-modal");

loginGoogleBtn.onclick = () => signInWithPopup(auth, googleProvider).catch(e => alert(e.message));
loginEmailBtn.onclick = () => signInWithEmailAndPassword(auth, loginEmailInput.value, loginPassInput.value).catch(e => alert(e.message));

registerGoogleBtn.onclick = () => signInWithPopup(auth, googleProvider).catch(e => alert(e.message));
registerEmailBtn.onclick = () => createUserWithEmailAndPassword(auth, regEmailInput.value, regPassInput.value).catch(e => alert(e.message));
registerGuestBtn.onclick = () => signInAnonymously(auth).catch(e => alert(e.message));

logoutBtn.onclick = () => signOut(auth);

onAuthStateChanged(auth, user => {
  currentUser = user;
  if (user) {
    userInfo.textContent = `Hello, ${user.displayName || "Guest"}`;
    document.querySelectorAll(".auth-show").forEach(el => el.classList.add("hidden"));
    document.querySelectorAll(".auth-hide").forEach(el => el.classList.remove("hidden"));
    closeModal("login-modal");
    closeModal("register-modal");
  } else {
    userInfo.textContent = "Not signed in";
    document.querySelectorAll(".auth-show").forEach(el => el.classList.remove("hidden"));
    document.querySelectorAll(".auth-hide").forEach(el => el.classList.add("hidden"));
  }
});

function timeAgo(ts) {
  const now = Date.now();
  const seconds = Math.floor((now - ts.toMillis()) / 1000);
  if (seconds < 60) return `${seconds}s ago`;
  const mins = Math.floor(seconds / 60);
  if (mins < 60) return `${mins}m ago`;
  const hrs = Math.floor(mins / 60);
  if (hrs < 24) return `${hrs}h ago`;
  const days = Math.floor(hrs / 24);
  return `${days}d ago`;
}

postCommentBtn.onclick = async () => {
  if (!currentUser) return alert("Please login first");
  const text = commentBox.value.trim();
  if (!text) return;
  await addDoc(collection(db, "comments"), {
    text,
    uid: currentUser.uid,
    name: currentUser.displayName || "Guest",
    created: serverTimestamp(),
    edited: false,
    likes: [],
    dislikes: []
  });
  commentBox.value = "";
  loadComments(true);
};

async function loadComments(reset = false) {
  if (reset) {
    commentsContainer.innerHTML = "";
    lastVisible = null;
  }
  let q = query(collection(db, "comments"), orderBy("created", "desc"), limit(PAGE_SIZE));
  if (lastVisible) q = query(q, startAfter(lastVisible));
  const snap = await getDocs(q);
  loadMoreBtn.classList.toggle("hidden", snap.size < PAGE_SIZE);
  lastVisible = snap.docs[snap.docs.length - 1];
  snap.forEach(docSnap => renderComment(docSnap.id, docSnap.data()));
}

function renderComment(id, data) {
  const div = document.createElement("div");
  div.className = "bg-white p-4 rounded shadow-sm";
  div.innerHTML = `
    <div class="flex justify-between">
      <p class="font-semibold">${data.name}</p>
      <p class="text-xs text-gray-500">${data.created ? timeAgo(data.created) : ""}${data.edited ? " • edited" : ""}</p>
    </div>
    <p class="my-2">${data.text}</p>
  `;
  commentsContainer.appendChild(div);
}

loadMoreBtn.onclick = () => loadComments();
onSnapshot(query(collection(db, "comments"), orderBy("created", "desc"), limit(PAGE_SIZE)), () => {
  loadComments(true);
});

loadComments();
</script>
</body>
</html>
